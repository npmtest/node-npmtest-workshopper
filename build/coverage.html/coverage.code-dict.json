{"/home/travis/build/npmtest/node-npmtest-workshopper/test.js":"/* istanbul instrument in package npmtest_workshopper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-workshopper/lib.npmtest_workshopper.js":"/* istanbul instrument in package npmtest_workshopper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_workshopper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_workshopper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-workshopper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-workshopper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_workshopper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_workshopper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_workshopper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_workshopper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_workshopper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_workshopper.__dirname + '/lib.npmtest_workshopper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/workshopper.js":"const argv         = require('optimist').argv\n    , fs           = require('fs')\n    , path         = require('path')\n    , map          = require('map-async')\n    , msee         = require('msee')\n    , chalk        = require('chalk')\n    , inherits     = require('util').inherits\n    , EventEmitter = require('events').EventEmitter\n\n/* jshint -W079 */\nconst showMenu         = require('./exerciseMenu')\n    , showLanguageMenu = require('./languageMenu')\n    , print            = require('./print-text')\n    , util             = require('./util')\n    , i18n             = require('./i18n')\n/* jshint +W079 */\n\nconst defaultWidth = 65\n\nfunction Workshopper (options) {\n  if (!(this instanceof Workshopper))\n    return new Workshopper(options)\n\n  EventEmitter.call(this)\n\n  var handled = false\n    , exercise\n    , mode = argv._[0]\n\n  if (typeof options != 'object')\n    throw new TypeError('need to provide an options object')\n\n  if (typeof options.name != 'string')\n    throw new TypeError('need to provide a `name` String option')\n\n  this.appName       = options.name\n  this.appDir        = util.assertDir(options, 'appDir')\n  this.exerciseDir   = util.assertDir(options, 'exerciseDir', options.appDir, 'exercises')\n  this.globalDataDir = util.userDir('.config', 'workshopper')\n  this.dataDir       = util.userDir('.config', this.appName)\n\n  util.assertFile(options, 'menuJson', options.exerciseDir, 'menu.json')\n\n  if (!options.languages) {\n    // In case a workshopper didn't define a any language\n    options.languages = ['en']\n  }\n\n  this.defaultLang = options.languages[0]\n  // optional\n  this.menuOptions = options.menu\n  // helpFile is additional to the usage in usage.txt\n  this.helpFile    = options.helpFile\n  // optional\n  this.footerFile  =   options.footerFile === false\n                     ? []\n                     : [options.footerFile, path.join(__dirname, './i18n/footer/{lang}.md')]\n  this.width       = typeof options.width == 'number'\n      ? options.width\n      : defaultWidth\n  // an `onComplete` hook function *must* call the callback given to it when it's finished, async or not\n  this.onComplete  = typeof options.onComplete == 'function' && options.onComplete\n  this.exercises   = require(options.menuJson).filter(function (e) {\n    return !/^\\/\\//.test(e)\n  })\n\n\n  try {\n    this.lang = i18n.chooseLang(\n        this.globalDataDir\n      , this.dataDir\n      , argv.l || argv.lang\n      , this.defaultLang\n      , options.languages\n    )\n  } catch (e) {\n    if (e instanceof TypeError)  // In case the language couldn't be selected\n      console.log(e.message)\n    else\n      console.error(e.stack)\n    process.exit(1)\n  }\n\n  this.i18n      = i18n.init(options, this.exercises, this.lang, this.globalDataDir)\n  this.__        = this.i18n.__\n  this.__n       = this.i18n.__n\n  this.languages = this.i18n.languages\n\n  // backwards compatibility for title and subtitle\n  this.__defineGetter__('title', this.__.bind(this, 'title'))\n  this.__defineGetter__('subtitle', this.__.bind(this, 'subtitle'))\n\n  if (argv.v || argv.version || mode == 'version')\n    return console.log(\n        this.appName\n      + '@'\n      + require(path.join(this.appDir, 'package.json')).version\n    )\n\n  if (argv.h || argv.help || mode == 'help')\n    return this._printHelp()\n\n  this.current = this.getData('current')\n\n  if (options.menuItems && !options.commands)\n    options.commands = options.menuItems\n\n  if (Array.isArray(options.commands)) {\n    options.commands.forEach(function (item) {\n      if (mode == item.name\n          || argv[item.name]\n          || (item.short && argv[item.short])) {\n        handled = true\n        return item.handler(this)\n      }\n    }.bind(this))\n\n    if (handled)\n      return\n\n    this.commands = options.commands\n  }\n\n  if (mode == 'list') {\n    return this.exercises.forEach(function (name) {\n      console.log(this.__('exercise.' + name))\n    }.bind(this))\n  }\n\n  if (mode == 'current')\n    return console.log(this.__('exercise.' + this.current))\n\n  if (mode == 'select' || mode == 'print') {\n    var selected = argv._.length > 1 ? argv._.slice(1).join(' ') : this.current\n    if (/[0-9]+/.test(selected)) {\n      selected = this.exercises[parseInt(selected-1, 10)] || selected\n    } else {\n      selected = this.exercises.filter(function (exercise) {\n        return selected === this.__('exercise.' + exercise)\n      }.bind(this))[0] || selected;\n    }\n    onselect.call(this, selected)\n    return\n  }\n\n  if (mode == 'verify' || mode == 'run') {\n    exercise = this.current && this.loadExercise(this.current)\n\n    if (!this.current)\n      return error(this.__('error.exercise.none_active'))\n\n    if (!exercise)\n      return error(this.__('error.exercise.missing', {name: name}))\n\n    if (exercise.requireSubmission !== false && argv._.length == 1)\n      return error(this.__('ui.usage', {appName: this.appName, mode: mode}))\n\n    return this.execute(exercise, mode, argv._.slice(1))\n  }\n\n  if (argv._[0] == 'next') {\n    var remainingAfterCurrent = this.exercises.slice(this.exercises.indexOf(this.current))\n\n    var completed = this.getData('completed')\n\n    if (!completed)\n      return error(this.__('error.exercise.none_active') + '\\n')\n\n    var incompleteAfterCurrent = remainingAfterCurrent.filter(function (elem) {\n      return completed.indexOf(elem) < 0\n    })\n\n    if (incompleteAfterCurrent.length === 0)\n      return console.log(this.__('error.no_uncomplete_left') + '\\n')\n\n    return onselect.call(this, incompleteAfterCurrent[0])\n  }\n\n  if (mode == 'reset') {\n    this.reset()\n    return console.log(this.__('progress.reset', {title: this.__('title')}))\n  }\n\n  this.printMenu()\n}\n\ninherits(Workshopper, EventEmitter)\n\n\nWorkshopper.prototype.end = function (mode, pass, exercise, callback) {\n  exercise.end(mode, pass, function (err) {\n    if (err)\n      return error(this.__('error.cleanup', {err: err.message || err}))\n\n    setImmediate(callback || function () {\n      process.exit(pass ? 0 : -1)\n    })\n  }.bind(this))\n}\n\n\n// overall exercise fail\nWorkshopper.prototype.exerciseFail = function (mode, exercise) {\n  console.log('\\n' + chalk.bold.red('# ' + this.__('solution.fail.title')) + '\\n')\n  console.log(this.__('solution.fail.message', {name: this.__('exercise.' + exercise.name)}))\n\n  this.end(mode, false, exercise)\n}\n\n\n// overall exercise pass\nWorkshopper.prototype.exercisePass = function (mode, exercise) {\n  console.log('\\n' + chalk.bold.green('# ' + this.__('solution.pass.title')) + '\\n')\n  console.log(chalk.bold(this.__('solution.pass.message', {name: this.__('exercise.' + exercise.name)})) + '\\n')\n\n  var done = function done () {\n    var completed = this.getData('completed') || []\n      , remaining\n\n    this.updateData('completed', function (xs) {\n      if (!xs)\n        xs = []\n\n      return xs.indexOf(exercise.name) >= 0 ? xs : xs.concat(exercise.name)\n    })\n\n    completed = this.getData('completed') || []\n\n    remaining = this.exercises.length - completed.length\n\n    if (remaining === 0) {\n      if (this.onComplete)\n        return this.onComplete(this.end.bind(this, mode, true, exercise))\n      else\n        console.log(this.__('progress.finished'))\n    } else {\n      console.log(this.__n('progress.remaining', remaining))\n      console.log(this.__('ui.return', {appName: this.appName}))\n    }\n\n    this.end(mode, true, exercise)\n  }.bind(this)\n\n  if (exercise.hideSolutions)\n    return done()\n\n  exercise.getSolutionFiles(function (err, files) {\n    if (err)\n      return error(this.__('solution.notes.load_error', {err: err.message || err}))\n    if (!files.length)\n      return done()\n\n    console.log(this.__('solution.notes.compare'))\n\n    function processSolutionFile (file, callback) {\n      fs.readFile(file, 'utf8', function (err, content) {\n        if (err)\n          return callback(err)\n\n        var filename = path.basename(file)\n\n        // code fencing is necessary for msee to render the solution as code\n        content = msee.parse('```js\\n' + content + '\\n```')\n        callback(null, { name: filename, content: content })\n      })\n    }\n\n    function printSolutions (err, solutions) {\n      if (err)\n        return error(this.__('solution.notes.load_error', {err: err.message || err}))\n\n      solutions.forEach(function (file, i) {\n        console.log(chalk.yellow(util.repeat('\\u2500', 80)))\n\n        if (solutions.length > 1)\n          console.log(chalk.bold.yellow(file.name + ':') + '\\n')\n\n        console.log(file.content.replace(/^\\n/m, '').replace(/\\n$/m, ''))\n\n        if (i == solutions.length - 1)\n          console.log(chalk.yellow(util.repeat('\\u2500', 80)) + '\\n')\n      }.bind(this))\n\n      done()\n    }\n\n    map(files, processSolutionFile, printSolutions.bind(this))\n  }.bind(this))\n}\n\n\n// single 'pass' event for a validation\nfunction onpass (msg) {\n  console.log(chalk.green.bold('\\u2713 ') + msg)\n}\n\n\n// single 'fail' event for validation\nfunction onfail (msg) {\n  console.log(chalk.red.bold('\\u2717 ') + msg)\n}\n\n\nWorkshopper.prototype.execute = function (exercise, mode, args) {\n  // individual validation events\n  exercise.on('pass', onpass)\n  exercise.on('fail', onfail)\n  exercise.on('pass', this.emit.bind(this, 'pass', exercise, mode))\n  exercise.on('fail', this.emit.bind(this, 'fail', exercise, mode))\n\n\n  function done (err, pass) {\n    var errback\n\n    if (err) {\n      // if there was an error then we need to do this after cleanup\n      errback = function () {\n        error(this.__('error.exercise.unexpected_error', {mode: mode, err: (err.message || err) }))\n      }.bind(this)\n    }\n\n    if (mode == 'run' || err)\n      return this.end(mode, true, exercise, errback) // clean up\n\n    if (!pass)\n      return this.exerciseFail(mode, exercise)\n\n    this.exercisePass(mode, exercise)\n  }\n\n  exercise[mode](args, done.bind(this))\n}\n\nWorkshopper.prototype.selectLanguage = function (lang) {\n  this.i18n.change(this.globalDataDir, this.dataDir, lang, this.defaultLang, this.i18n.languages)\n  this.lang = lang\n  this.printMenu()\n}\n\nWorkshopper.prototype.printLanguageMenu = function () {\n  var menu = showLanguageMenu({\n      name      : this.appName\n    , languages : this.i18n.languages\n    , lang      : this.lang\n    , width     : this.width\n    , menu      : this.menuOptions\n  }, this.i18n)\n\n  menu.on('select', this.selectLanguage.bind(this))\n  menu.on('cancel', this.printMenu.bind(this))\n  menu.on('exit', this._exit.bind(this))\n}\n\nWorkshopper.prototype._exit = function () {\n  process.exit(0)\n}\n\nWorkshopper.prototype.printMenu = function () {\n  var menu = showMenu({\n      name          : this.appName\n    , languages     : this.i18n.languages\n    , width         : this.width\n    , completed     : this.getData('completed') || []\n    , exercises     : this.exercises\n    , extras        : this.commands && this.commands\n                        .filter(function (item) {\n                          return item.menu !== false\n                        })\n                        .map(function (item) {\n                          return item.name.toLowerCase()\n                        })\n    , menu          : this.menuOptions\n  }, this.i18n)\n\n  menu.on('select', onselect.bind(this))\n  menu.on('exit', this._exit.bind(this))\n  menu.on('language', this.printLanguageMenu.bind(this))\n  menu.on('help', this._printHelp.bind(this))\n\n  if (this.commands) {\n    this.commands.forEach(function (item) {\n      menu.on('extra-' + item.name, function () {\n        item.handler(this)\n      }.bind(this))\n    }.bind(this))\n  }\n}\n\n\nWorkshopper.prototype.getData = function (name) {\n  var file = path.resolve(this.dataDir, name + '.json')\n  try {\n    return JSON.parse(fs.readFileSync(file, 'utf8'))\n  } catch (e) {}\n  return null\n}\n\n\nWorkshopper.prototype.updateData = function (id, fn) {\n  var json = {}\n    , file\n\n  try {\n    json = this.getData(id)\n  } catch (e) {}\n\n  file = path.resolve(this.dataDir, id + '.json')\n  fs.writeFileSync(file, JSON.stringify(fn(json)))\n}\n\n\nWorkshopper.prototype.reset = function () {\n  fs.unlink(path.resolve(this.dataDir, 'completed.json'), function () {})\n  fs.unlink(path.resolve(this.dataDir, 'current.json'), function () {})\n}\n\n\nWorkshopper.prototype.dirFromName = function (name) {\n  return util.dirFromName(this.exerciseDir, name)\n}\n\n\nWorkshopper.prototype._printHelp = function () {\n  this._printUsage(print.localisedFile.bind(print, this.appName, this.appDir, this.helpFile, this.lang))\n}\n\n\nWorkshopper.prototype._printUsage = function (callback) {\n  print.localisedFirstFile(this.appName, this.appDir, [\n    path.join(__dirname, './i18n/usage/{lang}.txt'),\n    path.join(__dirname, './i18n/usage/en.txt')\n  ], this.lang, callback)\n}\n\nWorkshopper.prototype.getExerciseMeta = function (name) {\n  if (!name)\n    return false\n\n  name = name.toLowerCase().trim()\n\n  var number\n    , dir\n\n  this.exercises.some(function (_name, i) {\n    if (_name.toLowerCase().trim() != name)\n      return false\n\n    number = i + 1\n    name   = _name\n    return true\n  })\n\n  if (number === undefined)\n    return null\n\n  dir = this.dirFromName(name)\n\n  return {\n      name         : name\n    , number       : number\n    , dir          : dir\n    , id           : util.idFromName(name)\n    , exerciseFile : path.join(dir, './exercise.js')\n  }\n}\n\nWorkshopper.prototype.loadExercise = function (name) {\n  var meta = this.getExerciseMeta(name)\n    , stat\n    , exercise\n\n  if (!meta)\n    return null\n\n  try {\n    stat = fs.statSync(meta.exerciseFile)\n  } catch (err) {\n    return error(this.__('error.exercise.missing_file', {exerciseFile: meta.exerciseFile}))\n  }\n\n  if (!stat || !stat.isFile())\n    return error(this.__('error.exercise.missing_file', {exerciseFile: meta.exerciseFile}))\n\n  exercise = require(meta.exerciseFile)\n\n  if (!exercise || typeof exercise.init != 'function')\n    return error(this.__('error.exercise.not_a_workshopper', {exerciseFile: meta.exerciseFile}))\n\n  exercise.init(this, meta.id, meta.name, meta.dir, meta.number)\n\n  return exercise\n}\n\nfunction error () {\n  var pr = chalk.bold.red\n  console.log(pr.apply(pr, arguments))\n  process.exit(-1)\n}\n\nfunction onselect (name) {\n  var exercise = this.loadExercise(name)\n\n  if (!exercise)\n    return error(this.__('error.exercise.missing', {name: name}))\n\n  console.log(\n      '\\n ' + chalk.green.bold(this.__('title'))\n    + '\\n' + chalk.green.bold(util.repeat('\\u2500', chalk.stripColor(this.__('title')).length + 2))\n    + '\\n ' + chalk.yellow.bold(this.__('exercise.' + exercise.name))\n    + '\\n ' + chalk.yellow.italic(this.__('progress.state', {count: exercise.number, amount: this.exercises.length}))\n    + '\\n'\n  )\n\n  this.current = exercise.name\n\n  this.updateData('current', function () {\n    return exercise.name\n  })\n\n  exercise.prepare(function (err) {\n    if (err)\n      return error(this.__('error.exercise.preparing', {err: err.message || err}))\n\n    exercise.getExerciseText(function (err, type, exerciseText) {\n      if (err)\n        return error(this.__('error.exercise.loading', {err: err.message || err}))\n\n      print.text(this.appName, this.appDir, type, exerciseText)\n\n      print.localisedFirstFile(this.appName, this.appDir, this.footerFile, this.lang)\n\n    }.bind(this))\n  }.bind(this))\n}\n\n\nWorkshopper.prototype.error = error\nWorkshopper.prototype.print = print\n\n\nmodule.exports = Workshopper\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/exerciseMenu.js":"const chalk = require('chalk')\n\nconst menu = require('./menu')\n\nfunction showMenu (opts, i18n) {\n\n  var __ = i18n.__\n\n  opts.entries = [\n      opts.exercises.map(function (exercise) {\n        return {\n            name: chalk.bold('»') + ' ' + __('exercise.' + exercise)\n          , marker: (opts.completed.indexOf(exercise) >= 0) ? '[' + __('menu.completed') + ']' : ''\n          , event: 'select'\n          , payload: exercise\n        }\n      })\n    , { separator: true }\n    , { name: chalk.bold(__('menu.help')), event: 'help' }\n    , (opts.languages && opts.languages.length > 1)\n      ? { name: chalk.bold(__('menu.language')), event: 'language'}\n      : null\n    , (opts.extras || []).map(function (extra) {\n        return { name: chalk.bold(__('menu.' + extra)), event: 'extra-' + extra }\n      })\n    , { name: chalk.bold(__('menu.exit')), event: 'exit' }\n  ]\n\n  return menu(opts, i18n)\n}\n\n\nmodule.exports = showMenu","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/menu.js":"const tmenu        = require('terminal-menu')\n    , path         = require('path')\n    , fs           = require('fs')\n    , xtend        = require('xtend')\n    , EventEmitter = require('events').EventEmitter\n    , chalk        = require('chalk')\n    , util         = require('util')\n\nconst repeat          = require('./util').repeat\n    , applyTextMarker = require('./util').applyTextMarker\n    , maxListenersPerEvent = 10\n\n\nfunction showMenu (opts, i18n) {\n\n  var emitter         = new EventEmitter()\n    , menu            = tmenu(xtend({\n          width : opts.width\n        , x     : 3\n        , y     : 2\n      }, opts.menu))\n    , __              = i18n.__\n    , __n             = i18n.__n\n    , menuStream\n\n  function writeLine() {\n    menu.write(repeat('\\u2500', opts.width) + '\\n')\n  }\n\n  function emit(event, value) {\n    return process.nextTick.bind(process, emitter.emit.bind(emitter, event, value))\n  }\n\n  function addEntry(entry) {\n    menu.add(applyTextMarker(entry.name, entry.marker || '', opts.width), emit(entry.event, entry.payload))\n  }\n\n  function addVariableEntry(variableEntry) {\n    if (!variableEntry)\n      return\n\n    if (util.isArray(variableEntry))\n      return variableEntry.forEach(addVariableEntry)\n\n    if (variableEntry.separator)\n      return writeLine()\n\n    addEntry(variableEntry)\n  }\n\n  menu.reset()\n\n  menu.write(chalk.bold(__('title')) + '\\n')\n\n  if (i18n.has('subtitle'))\n    menu.write(chalk.italic(__('subtitle')) + '\\n')\n\n  writeLine()\n\n  menu.setMaxListeners(opts.entries.length * maxListenersPerEvent)\n  opts.entries.forEach(addVariableEntry)\n\n  function regexpEncode(str) {\n    return str.replace(/([\\.\\*\\+\\?\\{\\}\\[\\]\\- \\(\\)\\|\\^\\$\\\\])/g, \"\\\\$1\")\n  }\n\n  function passDataToMenu(data) {\n    // Node 0.10 fix\n    menuStream.write(data)\n  }\n\n  menu.on('select', function (label) {\n    menu.y = 0\n    menu.reset()\n    menu.close()\n    process.stdin.pause()\n    process.stdin.removeListener('data', passDataToMenu)\n    menuStream.unpipe(process.stdout)\n    process.stdin.unpipe(menuStream)\n    process.stdin.setRawMode(false)\n  })\n\n  menuStream = menu.createStream()\n  process.stdin\n    .on(\"data\", passDataToMenu)\n\n  menuStream.pipe(process.stdout, {end: false})\n\n  if(!process.stdin.isTTY) {\n    menu.reset()\n    console.error(__('error.notty'))\n    process.exit(1)\n  } else {\n    process.stdin.setRawMode(true)\n  }\n    \n  process.stdin.resume()\n\n  return emitter\n}\n\n\nmodule.exports = showMenu\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/util.js":"const path   = require('path')\n    , fs     = require('fs')\n    , mkdirp = require('mkdirp')\n    , vw     = require('visualwidth')\n\n\nfunction repeat (ch, sz) {\n  return new Array(sz + 1).join(ch)\n}\n\n\nfunction idFromName (id) {\n  return id.toLowerCase()\n    .replace(/\\s/g, '_')\n    .replace(/[^\\w]/gi, '')\n}\n\n\nfunction dirFromName (exerciseDir, name) {\n  return path.join(exerciseDir, idFromName(name))\n}\n\nfunction assertFs (type, options, field, base, fallback) {\n  var target = options[field]\n    , stat\n  if (typeof target != 'string')\n    if (fallback)\n      options[field] = target = path.join(base, fallback)\n    else\n      throw new TypeError('need to provide an \"' + field + '\" String option')\n\n  try {\n    stat = fs.statSync(target)\n  } catch (e) {}\n\n  if (!stat || !(type === 'file' ? stat.isFile() : stat.isDirectory()))\n    throw new Error('\"' + field + '\" [' + path.relative('.', target) + '] does not exist or is not a ' + type)\n\n  return target\n}\n\nfunction userDir () {\n  var folders = [process.env.HOME || process.env.USERPROFILE].concat(Array.prototype.slice.apply(arguments))\n  var dir = path.join.apply(path, folders)\n  mkdirp.sync(dir)\n  return dir\n}\n\nfunction applyTextMarker (text, marker, size) {\n  var availableSpace = size - vw.width(marker, true)\n\n  text = vw.truncate(text, availableSpace, '...', true)\n\n  return text + repeat(' ', availableSpace - vw.width(text, true)) + marker\n}\n\nmodule.exports = {\n\t  idFromName: idFromName\n\t, dirFromName: dirFromName\n  , repeat: repeat\n  , applyTextMarker: applyTextMarker\n  , assertDir: assertFs.bind(null, 'dir')\n  , assertFile: assertFs.bind(null, 'file')\n  , userDir: userDir\n}\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/languageMenu.js":"const chalk = require('chalk')\n\nconst menu = require('./menu')\n\nfunction showMenu (opts, i18n) {\n\n  var __ = i18n.__\n\n  opts.entries = [\n      opts.languages.map(function (lang) {\n        return {\n            name: chalk.bold('»') + ' ' + __('language.' + lang)\n          , marker: (opts.lang === lang) ? '[' + __('language._current') + ']' : ''\n          , event: 'select'\n          , payload: lang\n        }\n      })\n    , { separator: true }\n    , { name: chalk.bold(__('menu.cancel')), event: 'cancel' }\n    , { name: chalk.bold(__('menu.exit')), event: 'exit' }\n  ]\n\n  return menu(opts, i18n)\n}\n\n\nmodule.exports = showMenu\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/print-text.js":"const fs          = require('fs')\n    , path        = require('path')\n    , colorsTmpl  = require('colors-tmpl')\n    , msee        = require('msee')\n    , mseeOptions = {\n          paragraphStart: ''\n        , paragraphEnd: '\\n\\n'\n      }\n\n\nfunction printText (appName, appDir, filetype, contents) {\n  var variables = {\n      appname : appName\n    , rootdir : appDir\n  }\n\n  contents = colorsTmpl(contents)\n\n  contents = contents.replace(/\\{([^}]+)\\}/gi, function (match, k) {\n    return variables[k] || ('{' + k + '}')\n  })\n\n  // proper path resolution\n  contents = contents.replace(/\\{rootdir:([^}]+)\\}/gi, function (match, subpath) {\n    return 'file://' + path.join(appDir, subpath)\n  })\n\n  if (filetype == 'md') {\n    // convert Markdown to ANSI\n    contents = msee.parse(contents, mseeOptions)\n  }\n\n  console.log(contents)\n}\n\n\nfunction printFile (appName, appDir, file, callback) {\n  fs.readFile(file, 'utf8', function (err, contents) {\n    if (err)\n      throw err\n\n    printText(appName, appDir, path.extname(file).replace(/^\\./, ''), contents)\n    callback && callback();\n  })\n}\n\n\nfunction getExistingFile (file, lang) {\n  if (!file)\n    return false\n\n  file = file.replace(/\\{lang\\}/g, lang)\n  if (fs.existsSync(file)) {\n    var stat = fs.statSync(file)\n    if (stat && stat.isFile())\n      return file\n  }\n  return null\n}\n\nfunction printLocalisedFile (appName, appDir, file, lang, callback) {\n  file = getExistingFile(file, lang)\n\n  if (file) {\n    printFile(appName, appDir, file, callback)\n    return true\n  }\n\n  if (callback)\n    process.nextTick(callback)\n\n  return false\n}\n\nfunction printLocalisedFirstFile (appName, appDir, files, lang, callback) {\n  var consumed = false\n  files.filter(function (file) {\n    // Since the files that will be printed are subject to user manipulation\n    // a null can happen here, checking for it just in case.\n    return file !== undefined && file !== null\n  }).forEach(function (file) {\n    if (consumed)\n      return\n    if (file = getExistingFile(file, lang)) {\n      consumed = true\n      printFile(appName, appDir, file, callback)\n    }\n  })\n  if (!consumed && callback)\n    process.nextTick(callback)\n  return consumed\n}\n\n\nmodule.exports.text = printText\nmodule.exports.file = printFile\nmodule.exports.localisedFile = printLocalisedFile\nmodule.exports.localisedFirstFile = printLocalisedFirstFile\n","/home/travis/build/npmtest/node-npmtest-workshopper/node_modules/workshopper/i18n.js":"const i18n       = require('i18n-core')\n    , i18nFs     = require('i18n-core/lookup/fs')\n    , i18nObject = require('i18n-core/lookup/object')\n    , path       = require('path')\n    , fs         = require('fs')\n\nfunction i18nChain() {\n  var linked = {\n        handler: arguments[0]\n      , next: null\n    }\n    , current = linked\n  for (var i = 1; i<arguments.length; i++) {\n    var next = {\n      handler: arguments[i]\n    }\n    current.next = next\n    current = next\n  }\n  return {\n    get: function (key) {\n      var current = linked\n        , result\n      while (!result && current) {\n        result = current.handler.get(key)\n        current = current.next\n      }\n\n      return result\n    }\n  }\n}\n\nfunction createDefaultLookup(options, exercises) {\n  var result = {\n    en: {\n        title: options.title\n      , subtitle: options.subtitle\n      , exercise: {}\n    }\n  }\n\n  exercises.forEach(function (exercise) {\n    result.en.exercise[exercise] = exercise\n  })\n\n  return result\n}\n\nfunction chooseLang (globalDataDir, appDataDir, lang, defaultLang, availableLangs) {\n  var globalPath = path.resolve(globalDataDir, 'lang.json')\n    , appPath = path.resolve(appDataDir, 'lang.json')\n    , data\n  try {\n    // Lets see if we find some stored language in the app's config\n    data = require(appPath)\n  } catch (e) {\n    // Without a file an error will occur here, but thats okay\n  }\n  if (!data) {\n    // Lets see if some other workshopper stored language settings\n    try {\n      data = require(globalPath)\n    } catch (e) {\n      data = {}\n      // Without a file an error will occur here, but thats okay\n    }\n  }\n\n  if (!!lang && typeof lang != 'string')\n    throw new TypeError('Please supply a language. Available languages are: ' + availableLangs.join(', '))\n\n  if (lang)\n    lang = lang.replace(/_/g, '-').toLowerCase()\n\n  if (availableLangs.indexOf(defaultLang) === -1)\n    throw new TypeError('The default language \"' + defaultLang + ' is not one of the available languages?! Available languages are: ' + availableLangs.join(', '))\n\n  if (lang && availableLangs.indexOf(lang) === -1)\n    throw new TypeError('The language \"' + lang + '\" is not available.\\nAvailable languages are ' + availableLangs.join(', ') + '.\\n\\nNote: the language is not case-sensitive (\"en\", \"EN\", \"eN\", \"En\" will become \"en\") and you can use \"_\" instead of \"-\" for seperators.')\n\n  if (availableLangs.indexOf(data.selected) === -1)\n    // The stored data is not available so lets use one of the other languages\n    data.selected = lang || defaultLang\n  else\n    data.selected = lang || data.selected || defaultLang\n\n  try {\n    fs.writeFileSync(globalPath, JSON.stringify(data))\n    fs.writeFileSync(appPath, JSON.stringify(data))\n  } catch(e) {\n    // It is not good if an error occurs but it shouldn't really matter\n  }\n  return data.selected\n}\n\nmodule.exports = {\n  chooseLang: chooseLang,\n  init: function(options, exercises, lang) {\n    var translator = i18n(\n          i18nChain(\n              i18nFs(path.resolve(options.appDir, './i18n'))\n            , i18nFs(path.resolve(__dirname, './i18n'))\n            , i18nObject(createDefaultLookup(options, exercises))\n          )\n        )\n      , result = translator.lang(lang, true)\n    translator.fallback = function (key) {\n      if (!key)\n        return '(???)'\n\n      return '?' + key + '?'\n    }\n    result.languages = options.languages || ['en']\n    result.change = function (globalDataDir, appDataDir, lang, defaultLang, availableLangs) {\n      result.changeLang(lang)\n      chooseLang(globalDataDir, appDataDir, lang, defaultLang, availableLangs)\n    }\n    return result\n  }\n}\n"}